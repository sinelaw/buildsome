#!/bin/bash
set -eu

buildsome=${1:-buildsome}

cd $(dirname $0)

get_size() {
    find Buildsome.mk.db/cached_outputs/ -type f | xargs du -bsc | grep total | cut -f1
}

check_cache() {
    expected_size="$1"
    expected_amount="$2"
    size=$(get_size)
    if [ "$size" -ne "$expected_size" ] ; then
       echo "Bad size: $size"
       exit 1
    fi

    if [ "$(find Buildsome.mk.db/cached_outputs/ -type f | wc -l)" -ne "$expected_amount" ] ; then
        echo "Bad amount!"
        exit 1
    fi

    test -e copy1 || echo "Missing copy1"
    test -e copy2 || echo "Missing copy2"
}

dummy_files_size="14"

dd if=/dev/urandom of=random1 bs=1024 count=1024
dd if=/dev/urandom of=random2 bs=1024 count=1024

$buildsome --with random

cp copy1 copy1-expected-with-random

$buildsome --without random

cp copy1 copy1-expected-without-random

$buildsome --with random

diff copy1 copy1-expected-without-random && echo 'Expecting output NOT same as --without random from before'
diff copy1 copy1-expected-with-random || echo 'Expecting output same as --with random from before'

$buildsome --without random

diff copy1 copy1-expected-without-random || echo 'Expecting output same as --without random from before'
diff copy1 copy1-expected-with-random && echo 'Expecting output same NOT as --with random from before'



# will populate the cache with 3 mb
$buildsome --max-cache-size 10

check_cache "$((2 * 1024 * 1024 + $dummy_files_size))" "4"

rm copy1
rm copy2

$buildsome --max-cache-size 10

check_cache "$((2 * 1024 * 1024 + $dummy_files_size))" "4"

$buildsome --max-cache-size 2

check_cache "$((1 * 1024 * 1024 + $dummy_files_size))" "3"

echo "OK"
